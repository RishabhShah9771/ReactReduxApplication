{"ast":null,"code":"// Import the createSlice function from Redux Toolkit to simplify slice creation\nimport { createSlice } from \"@reduxjs/toolkit\";\n\n// Create a slice for authentication state management\nconst authSlice = createSlice({\n  // Name of the slice, used as a prefix for generated action types\n  name: \"authentication\",\n  // Initial state for the authentication slice\n  initialState: {\n    isAuthenticated: false\n  },\n  // Reducers define how the state can be updated\n  reducers: {\n    // Action to set isAuthenticated to true (user logs in)\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    // Action to set isAuthenticated to false (user logs out)\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\n\n// Export the generated actions for use in components\nexport const authActions = authSlice.actions;\n// Export the reducer to be included in the Redux store\nexport default authSlice.reducer;\n\n// const counterReducer = (state = { counter: 0, showCounter: false }, action) => {\n//   if (action.type === \"increment\") {\n//     // Objects in reducer will not merge the existing state it will overwrite the existing state and returns new state.\n//     // Never mutate the existing state in redux need to return new state in redux.\n//     // Always create a brand new array or objects.\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.payload,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n\n//   return state;\n// };","map":{"version":3,"names":["createSlice","authSlice","name","initialState","isAuthenticated","reducers","login","state","logout","authActions","actions","reducer"],"sources":["/Users/rishabhshah/Downloads/React Projects/React Projects/ReactReduxApplication/src/store/authSlice.js"],"sourcesContent":["// Import the createSlice function from Redux Toolkit to simplify slice creation\nimport { createSlice } from \"@reduxjs/toolkit\";\n\n// Create a slice for authentication state management\nconst authSlice = createSlice({\n  // Name of the slice, used as a prefix for generated action types\n  name: \"authentication\",\n  // Initial state for the authentication slice\n  initialState: { isAuthenticated: false },\n  // Reducers define how the state can be updated\n  reducers: {\n    // Action to set isAuthenticated to true (user logs in)\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    // Action to set isAuthenticated to false (user logs out)\n    logout(state) {\n      state.isAuthenticated = false;\n    },\n  },\n});\n\n// Export the generated actions for use in components\nexport const authActions = authSlice.actions;\n// Export the reducer to be included in the Redux store\nexport default authSlice.reducer;\n\n// const counterReducer = (state = { counter: 0, showCounter: false }, action) => {\n//   if (action.type === \"increment\") {\n//     // Objects in reducer will not merge the existing state it will overwrite the existing state and returns new state.\n//     // Never mutate the existing state in redux need to return new state in redux.\n//     // Always create a brand new array or objects.\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.payload,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n\n//   return state;\n// };\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC5B;EACAE,IAAI,EAAE,gBAAgB;EACtB;EACAC,YAAY,EAAE;IAAEC,eAAe,EAAE;EAAM,CAAC;EACxC;EACAC,QAAQ,EAAE;IACR;IACAC,KAAKA,CAACC,KAAK,EAAE;MACXA,KAAK,CAACH,eAAe,GAAG,IAAI;IAC9B,CAAC;IACD;IACAI,MAAMA,CAACD,KAAK,EAAE;MACZA,KAAK,CAACH,eAAe,GAAG,KAAK;IAC/B;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMK,WAAW,GAAGR,SAAS,CAACS,OAAO;AAC5C;AACA,eAAeT,SAAS,CAACU,OAAO;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}