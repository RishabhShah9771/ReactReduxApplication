{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: {\n    counter: 0,\n    showCounter: false\n  },\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\n// const counterReducer = (state = { counter: 0, showCounter: false }, action) => {\n//   if (action.type === \"increment\") {\n//     // Objects in reducer will not merge the existing state it will overwrite the existing state and returns new state.\n//     // Never mutate the existing state in redux need to return new state in redux.\n//     // Always create a brand new array or objects.\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.payload,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n\n//   return state;\n// };\n\n// Actions objects are automatically created behind the scenes.\n// Just need to put it in the actions like counterSlice.actions.increment is equal to {type: \"increment\"}\n// We need to export it like a whole object and then we can pass it in dispatch.\n// Actions that are passed in dispatch need to be passed as functions so it can automatically pass to the  respective reducer function.\n\nexport const counterActions = counterSlice.actions;\n// Configure store requires a object not the reducer function.\n// To pass multiple reducers we can pass it as a map of reducers such as passing it to a nested object like reducer: {counter: counterSlice.reducer}\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport default store;","map":{"version":3,"names":["createStore","createSlice","configureStore","counterSlice","name","initialState","counter","showCounter","reducers","increment","state","decrement","increase","action","payload","toggleCounter","counterActions","actions","store","reducer"],"sources":["/Users/rishabhshah/Downloads/React Projects/React Projects/ReactReduxApplication/src/store/index.js"],"sourcesContent":["import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: { counter: 0, showCounter: false },\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n\n// const counterReducer = (state = { counter: 0, showCounter: false }, action) => {\n//   if (action.type === \"increment\") {\n//     // Objects in reducer will not merge the existing state it will overwrite the existing state and returns new state.\n//     // Never mutate the existing state in redux need to return new state in redux.\n//     // Always create a brand new array or objects.\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.payload,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n\n//   return state;\n// };\n\n// Actions objects are automatically created behind the scenes.\n// Just need to put it in the actions like counterSlice.actions.increment is equal to {type: \"increment\"}\n// We need to export it like a whole object and then we can pass it in dispatch.\n// Actions that are passed in dispatch need to be passed as functions so it can automatically pass to the  respective reducer function.\n\nexport const counterActions = counterSlice.actions;\n// Configure store requires a object not the reducer function.\n// To pass multiple reducers we can pass it as a map of reducers such as passing it to a nested object like reducer: {counter: counterSlice.reducer}\nconst store = configureStore({\n  reducer: counterSlice.reducer,\n});\n\nexport default store;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,MAAMC,YAAY,GAAGF,WAAW,CAAC;EAC/BG,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IAAEC,OAAO,EAAE,CAAC;IAAEC,WAAW,EAAE;EAAM,CAAC;EAChDC,QAAQ,EAAE;IACRC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACJ,OAAO,EAAE;IACjB,CAAC;IACDK,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACJ,OAAO,EAAE;IACjB,CAAC;IACDM,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACJ,OAAO,GAAGI,KAAK,CAACJ,OAAO,GAAGO,MAAM,CAACC,OAAO;IAChD,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACnBA,KAAK,CAACH,WAAW,GAAG,CAACG,KAAK,CAACH,WAAW;IACxC;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMS,cAAc,GAAGb,YAAY,CAACc,OAAO;AAClD;AACA;AACA,MAAMC,KAAK,GAAGhB,cAAc,CAAC;EAC3BiB,OAAO,EAAEhB,YAAY,CAACgB;AACxB,CAAC,CAAC;AAEF,eAAeD,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}