{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice } from \"@reduxjs/toolkit\";\ncreateSlice({\n  name: \"counter\",\n  initialState: {\n    counter: 0,\n    showCounter: false\n  },\n  reducers: {\n    increment() {},\n    decrement() {},\n    increase() {},\n    toggleCounter() {}\n  }\n});\nconst counterReducer = (state = {\n  counter: 0,\n  showCounter: false\n}, action) => {\n  if (action.type === \"increment\") {\n    // Objects in reducer will not merge the existing state it will overwrite the existing state and returns new state.\n    // Never mutate the existing state in redux need to return new state in redux.\n    // Always create a brand new array or objects.\n    return {\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"increase\") {\n    return {\n      counter: state.counter + action.payload,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"decrement\") {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"toggle\") {\n    return {\n      showCounter: !state.showCounter,\n      counter: state.counter\n    };\n  }\n  return state;\n};\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"names":["createStore","createSlice","name","initialState","counter","showCounter","reducers","increment","decrement","increase","toggleCounter","counterReducer","state","action","type","payload","store"],"sources":["/Users/rishabhshah/Downloads/React Projects/React Projects/ReactReduxApplication/src/store/index.js"],"sourcesContent":["import { createStore } from \"redux\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\ncreateSlice({\n  name: \"counter\",\n  initialState: { counter: 0, showCounter: false },\n  reducers: {\n    increment() {},\n    decrement() {},\n    increase() {},\n    toggleCounter() {},\n  },\n});\n\nconst counterReducer = (state = { counter: 0, showCounter: false }, action) => {\n  if (action.type === \"increment\") {\n    // Objects in reducer will not merge the existing state it will overwrite the existing state and returns new state.\n    // Never mutate the existing state in redux need to return new state in redux.\n    // Always create a brand new array or objects.\n    return {\n      counter: state.counter + 1,\n      showCounter: state.showCounter,\n    };\n  }\n  if (action.type === \"increase\") {\n    return {\n      counter: state.counter + action.payload,\n      showCounter: state.showCounter,\n    };\n  }\n  if (action.type === \"decrement\") {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter,\n    };\n  }\n  if (action.type === \"toggle\") {\n    return {\n      showCounter: !state.showCounter,\n      counter: state.counter,\n    };\n  }\n\n  return state;\n};\nconst store = createStore(counterReducer);\n\nexport default store;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,QAAQ,kBAAkB;AAE9CA,WAAW,CAAC;EACVC,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IAAEC,OAAO,EAAE,CAAC;IAAEC,WAAW,EAAE;EAAM,CAAC;EAChDC,QAAQ,EAAE;IACRC,SAASA,CAAA,EAAG,CAAC,CAAC;IACdC,SAASA,CAAA,EAAG,CAAC,CAAC;IACdC,QAAQA,CAAA,EAAG,CAAC,CAAC;IACbC,aAAaA,CAAA,EAAG,CAAC;EACnB;AACF,CAAC,CAAC;AAEF,MAAMC,cAAc,GAAGA,CAACC,KAAK,GAAG;EAAER,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAM,CAAC,EAAEQ,MAAM,KAAK;EAC7E,IAAIA,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;IAC/B;IACA;IACA;IACA,OAAO;MACLV,OAAO,EAAEQ,KAAK,CAACR,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEO,KAAK,CAACP;IACrB,CAAC;EACH;EACA,IAAIQ,MAAM,CAACC,IAAI,KAAK,UAAU,EAAE;IAC9B,OAAO;MACLV,OAAO,EAAEQ,KAAK,CAACR,OAAO,GAAGS,MAAM,CAACE,OAAO;MACvCV,WAAW,EAAEO,KAAK,CAACP;IACrB,CAAC;EACH;EACA,IAAIQ,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;IAC/B,OAAO;MACLV,OAAO,EAAEQ,KAAK,CAACR,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEO,KAAK,CAACP;IACrB,CAAC;EACH;EACA,IAAIQ,MAAM,CAACC,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAO;MACLT,WAAW,EAAE,CAACO,KAAK,CAACP,WAAW;MAC/BD,OAAO,EAAEQ,KAAK,CAACR;IACjB,CAAC;EACH;EAEA,OAAOQ,KAAK;AACd,CAAC;AACD,MAAMI,KAAK,GAAGhB,WAAW,CAACW,cAAc,CAAC;AAEzC,eAAeK,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}