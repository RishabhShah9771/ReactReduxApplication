{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer from \"./counterSlice\";\nimport authReducer from \"./authSlice\";\n\n// const counterReducer = (state = { counter: 0, showCounter: false }, action) => {\n//   if (action.type === \"increment\") {\n//     // Objects in reducer will not merge the existing state it will overwrite the existing state and returns new state.\n//     // Never mutate the existing state in redux need to return new state in redux.\n//     // Always create a brand new array or objects.\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.payload,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n\n//   return state;\n// };\n\n// Actions objects are automatically created behind the scenes.\n// Just need to put it in the actions like counterSlice.actions.increment is equal to {type: \"increment\"}\n// We need to export it like a whole object and then we can pass it in dispatch.\n// Actions that are passed in dispatch need to be passed as functions so it can automatically pass to the  respective reducer function.\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\n// Configure store requires a object not the reducer function.\n// To pass multiple reducers we can pass it as a map of reducers such as passing it to a nested object like reducer: {counter: counterSlice.reducer}\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport default store;","map":{"version":3,"names":["configureStore","counterReducer","authReducer","counterActions","counterSlice","actions","authActions","authSlice","store","reducer","counter","auth"],"sources":["/Users/rishabhshah/Downloads/React Projects/React Projects/ReactReduxApplication/src/store/index.js"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer from \"./counterSlice\";\nimport authReducer from \"./authSlice\";\n\n// const counterReducer = (state = { counter: 0, showCounter: false }, action) => {\n//   if (action.type === \"increment\") {\n//     // Objects in reducer will not merge the existing state it will overwrite the existing state and returns new state.\n//     // Never mutate the existing state in redux need to return new state in redux.\n//     // Always create a brand new array or objects.\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.payload,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n\n//   return state;\n// };\n\n// Actions objects are automatically created behind the scenes.\n// Just need to put it in the actions like counterSlice.actions.increment is equal to {type: \"increment\"}\n// We need to export it like a whole object and then we can pass it in dispatch.\n// Actions that are passed in dispatch need to be passed as functions so it can automatically pass to the  respective reducer function.\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\n// Configure store requires a object not the reducer function.\n// To pass multiple reducers we can pass it as a map of reducers such as passing it to a nested object like reducer: {counter: counterSlice.reducer}\nconst store = configureStore({\n  reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },\n});\n\nexport default store;\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,cAAc,MAAM,gBAAgB;AAC3C,OAAOC,WAAW,MAAM,aAAa;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGC,YAAY,CAACC,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGC,SAAS,CAACF,OAAO;AAC5C;AACA;AACA,MAAMG,KAAK,GAAGR,cAAc,CAAC;EAC3BS,OAAO,EAAE;IAAEC,OAAO,EAAEN,YAAY,CAACK,OAAO;IAAEE,IAAI,EAAEJ,SAAS,CAACE;EAAQ;AACpE,CAAC,CAAC;AAEF,eAAeD,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}